                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6c801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	
0x032: 202a                 |   rrmovq %rdx, %r10
0x034: c0fafdffffffffffffff |   iaddq $-3, %r10
0x03e: 712901000000000000   | 	jle Init2
                            | 
0x047: 6300                 | 	xorq %rax,%rax
0x049:                      | Loop:
0x049: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x053: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x05d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x05f: 717200000000000000   | 	jle Cp2
0x068: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x072:                      | Cp2:
0x072: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x07c: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x086: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x088: 719b00000000000000   | 	jle Cp3
0x091: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x09b:                      | Cp3:
0x09b: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0a5: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0af: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0b1: 71c400000000000000   | 	jle Cp4
0x0ba: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0c4:                      | Cp4:
0x0c4: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val from src...
0x0ce: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0d8: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0da: 71ed00000000000000   | 	jle update1
0x0e3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ed:                      | update1:	
0x0ed: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x0f7: c0f72000000000000000 | 	iaddq $32, %rdi		# src++
0x101: c0f62000000000000000 | 	iaddq $32, %rsi		# dst++
                            | 
0x10b:                      | Test:
0x10b: 202a                 |   rrmovq %rdx, %r10
0x10d: c0fafdffffffffffffff |   iaddq $-3, %r10
0x117: 764900000000000000   | 	jg Loop			# if so, goto Loop:
0x120: 702b01000000000000   |   jmp Test2
                            | 
0x129:                      | Init2:
0x129: 6300                 | 	xorq %rax,%rax		# count = 0;
0x12b:                      | Test2:
0x12b: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x12d: 718801000000000000   | 	jle Done		# if so, goto Done:
0x136:                      | Loop2:
0x136: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x140: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x14a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x14c: 715f01000000000000   | 	jle Update2# if so, goto Npos:
0x155: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x15f:                      | Update2:	
0x15f: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x169: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x173: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x17d: 6222                 |   andq %rdx, %rdx
0x17f: 763601000000000000   | 	jg Loop2			# if so, goto Loop:
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x188:                      | Done:
0x188: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x189:                      | End:
                            | #/* $end ncopy-ys */
0x189:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x190:                      | 	.align 8
0x190:                      | src:
0x190: 0100000000000000     | 	.quad 1
0x198: 0200000000000000     | 	.quad 2
0x1a0: fdffffffffffffff     | 	.quad -3
0x1a8: fcffffffffffffff     | 	.quad -4
0x1b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1c0:                      | 	.align 16
0x1c0:                      | Predest:
0x1c0: fadebc0000000000     | 	.quad 0xbcdefa
0x1c8:                      | dest:
0x1c8: abefcd0000000000     | 	.quad 0xcdefab
0x1d0: abefcd0000000000     | 	.quad 0xcdefab
0x1d8: abefcd0000000000     | 	.quad 0xcdefab
0x1e0: abefcd0000000000     | 	.quad 0xcdefab
0x1e8:                      | Postdest:
0x1e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x1f0:                      | .align 8
                            | # Run time stack
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
                            | 
0x270:                      | Stack:
