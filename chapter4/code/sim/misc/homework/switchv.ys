# Execution begins at address 0 
	.pos 0 
	irmovq stack, %rsp  	# Set up stack pointer  
	call main		# Execute main program
	halt			# Terminate program 

# Array of 4 elements
  .align 8
array:
  .quad 0x0
  .quad 0x0
  .quad 0x0
  .quad 0x0
  .quad 0x0
  .quad 0x0
  .quad 0x0
  .quad 0x0

  .align 8
CNT: .quad 0x8
MINVAL: .quad 0xffffffffffffffff

main:
  pushq %rbp
  rrmovq %rsp, %rbp
  iaddq $-64, %rsp
  iaddq $-16, %rsp

  pushq %rbx
  #irmovq array, %rbx
  rrmovq %rbp, %rbx
  iaddq $-64, %rbx

ainit:  
  irmovq $0, %rsi          #i=0
  rmmovq %rsi, -80(%rbp)
aloop:
  #mrmovq MINVAL, %rdi
  irmovq $-1, %rdi
  addq %rsi, %rdi
  call switchv
  rmmovq %rax, (%rbx)
  iaddq $8, %rbx
  mrmovq -80(%rbp), %rsi   #i++
  iaddq $1, %rsi
  rmmovq %rsi, -80(%rbp)
atest:  
  #mrmovq CNT, %r9          # if i<CNT
  irmovq $8, %r9
  subq %rsi, %r9
  jg aloop

  popq %rbx
  rrmovq %rbp, %rsp
  popq %rbp
	ret

mul:
  irmovq $0, %rax
  irmovq $0, %rdx
  subq %rsi, %rdx
  je end
  rrmovq %rsi, %rcx
  cmovg %rdx, %rsi
mloop:  
  addq %rdi, %rax
  iaddq $-1, %rsi
mtest:
  jne mloop

  irmovq $0, %rdx
  subq %rcx, %rdx
  jl end
  rrmovq %rax, %rdx
  xorq %rax, %rax
  subq %rdx, %rax
end:
  ret

	.align 8 	
jtable:
  .quad L0
  .quad default
  .quad L2
  .quad L3
  .quad default
  .quad L2

/* $begin switch */
switchv:
  irmovq $0, %rsi
  subq %rdi, %rsi
  jg default
  irmovq $5, %rsi
  subq %rdi, %rsi
  jl default
  irmovq $8, %rsi
  call mul
  mrmovq jtable(%rax), %rax
  pushq %rax
  ret
L0:
	irmovq $0xaaa,%rax
  jmp end
L2:
L5:
	irmovq $0xbbb,%rax
  jmp end
L3:
	irmovq $0xccc,%rax
  jmp end
default:
	irmovq $0xddd,%rax
end:
	ret
/* $end sumi-ys */

# The stack starts here and grows to lower addresses
	.pos 0x300		
stack:	 
