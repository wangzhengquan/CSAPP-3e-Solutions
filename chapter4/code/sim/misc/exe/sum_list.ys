# Execution begins at address 0 
	.pos 0 
	irmovq stack, %rsp  	# Set up stack pointer  
	call main		# Execute main program
	halt			# Terminate program 

# Array of 4 elements
.align 8 	
ele1:	.quad 0x00a
	.quad ele2
ele2:	.quad 0x0b0
	.quad ele3
ele3:	.quad 0xc00
	.quad 0

main:	irmovq ele1,%rdi	
	call sum		# sum(array, 4)
	ret 

/* $begin sumi-ys */
# long sum(list_ptr ls)
# start in %rdi, count in %rsi
sum:
	xorq %rax,%rax		# sum = 0
	andq %rdi,%rdi		# Set condition codes
	jmp    test
loop:
	mrmovq (%rdi),%r10	# Get *start
	addq %r10,%rax          # Add to sum
	mrmovq 8(%rdi),%rdi
	andq %rdi,%rdi		# Set condition codes
test:
	jne    loop             # Stop when 0
	ret
/* $end sumi-ys */

# The stack starts here and grows to lower addresses
	.pos 0x100		
stack:	 
