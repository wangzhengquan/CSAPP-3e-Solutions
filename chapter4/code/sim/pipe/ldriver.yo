                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f69803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	
0x032: 202a                 |   rrmovq %rdx, %r10
0x034: c0fafdffffffffffffff |   iaddq $-3, %r10
0x03e: 712901000000000000   | 	jle Init2
                            | 
0x047: 6300                 | 	xorq %rax,%rax
0x049:                      | Loop:
0x049: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x053: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x05d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x05f: 717200000000000000   | 	jle Cp2
0x068: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x072:                      | Cp2:
0x072: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x07c: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x086: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x088: 719b00000000000000   | 	jle Cp3
0x091: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x09b:                      | Cp3:
0x09b: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0a5: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0af: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0b1: 71c400000000000000   | 	jle Cp4
0x0ba: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0c4:                      | Cp4:
0x0c4: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val from src...
0x0ce: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0d8: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0da: 71ed00000000000000   | 	jle update1
0x0e3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ed:                      | update1:	
0x0ed: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x0f7: c0f72000000000000000 | 	iaddq $32, %rdi		# src++
0x101: c0f62000000000000000 | 	iaddq $32, %rsi		# dst++
                            | 
0x10b:                      | Test:
0x10b: 202a                 |   rrmovq %rdx, %r10
0x10d: c0fafdffffffffffffff |   iaddq $-3, %r10
0x117: 764900000000000000   | 	jg Loop			# if so, goto Loop:
0x120: 702b01000000000000   |   jmp Test2
                            | 
0x129:                      | Init2:
0x129: 6300                 | 	xorq %rax,%rax		# count = 0;
0x12b:                      | Test2:
0x12b: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x12d: 718801000000000000   | 	jle Done		# if so, goto Done:
0x136:                      | Loop2:
0x136: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x140: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x14a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x14c: 715f01000000000000   | 	jle Update2# if so, goto Npos:
0x155: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x15f:                      | Update2:	
0x15f: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x169: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x173: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x17d: 6222                 |   andq %rdx, %rdx
0x17f: 763601000000000000   | 	jg Loop2			# if so, goto Loop:
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x188:                      | Done:
0x188: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x189:                      | End:
                            | #/* $end ncopy-ys */
0x189:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x190:                      | 	.align 8
0x190:                      | src:
0x190: ffffffffffffffff     | 	.quad -1
0x198: 0200000000000000     | 	.quad 2
0x1a0: 0300000000000000     | 	.quad 3
0x1a8: fcffffffffffffff     | 	.quad -4
0x1b0: 0500000000000000     | 	.quad 5
0x1b8: faffffffffffffff     | 	.quad -6
0x1c0: f9ffffffffffffff     | 	.quad -7
0x1c8: f8ffffffffffffff     | 	.quad -8
0x1d0: 0900000000000000     | 	.quad 9
0x1d8: f6ffffffffffffff     | 	.quad -10
0x1e0: f5ffffffffffffff     | 	.quad -11
0x1e8: 0c00000000000000     | 	.quad 12
0x1f0: 0d00000000000000     | 	.quad 13
0x1f8: f2ffffffffffffff     | 	.quad -14
0x200: f1ffffffffffffff     | 	.quad -15
0x208: f0ffffffffffffff     | 	.quad -16
0x210: 1100000000000000     | 	.quad 17
0x218: eeffffffffffffff     | 	.quad -18
0x220: edffffffffffffff     | 	.quad -19
0x228: ecffffffffffffff     | 	.quad -20
0x230: 1500000000000000     | 	.quad 21
0x238: eaffffffffffffff     | 	.quad -22
0x240: e9ffffffffffffff     | 	.quad -23
0x248: e8ffffffffffffff     | 	.quad -24
0x250: 1900000000000000     | 	.quad 25
0x258: e6ffffffffffffff     | 	.quad -26
0x260: e5ffffffffffffff     | 	.quad -27
0x268: e4ffffffffffffff     | 	.quad -28
0x270: 1d00000000000000     | 	.quad 29
0x278: 1e00000000000000     | 	.quad 30
0x280: 1f00000000000000     | 	.quad 31
0x288: 2000000000000000     | 	.quad 32
0x290: 2100000000000000     | 	.quad 33
0x298: deffffffffffffff     | 	.quad -34
0x2a0: 2300000000000000     | 	.quad 35
0x2a8: 2400000000000000     | 	.quad 36
0x2b0: dbffffffffffffff     | 	.quad -37
0x2b8: 2600000000000000     | 	.quad 38
0x2c0: 2700000000000000     | 	.quad 39
0x2c8: d8ffffffffffffff     | 	.quad -40
0x2d0: 2900000000000000     | 	.quad 41
0x2d8: d6ffffffffffffff     | 	.quad -42
0x2e0: 2b00000000000000     | 	.quad 43
0x2e8: d4ffffffffffffff     | 	.quad -44
0x2f0: 2d00000000000000     | 	.quad 45
0x2f8: 2e00000000000000     | 	.quad 46
0x300: d1ffffffffffffff     | 	.quad -47
0x308: d0ffffffffffffff     | 	.quad -48
0x310: 3100000000000000     | 	.quad 49
0x318: 3200000000000000     | 	.quad 50
0x320: cdffffffffffffff     | 	.quad -51
0x328: ccffffffffffffff     | 	.quad -52
0x330: 3500000000000000     | 	.quad 53
0x338: 3600000000000000     | 	.quad 54
0x340: c9ffffffffffffff     | 	.quad -55
0x348: 3800000000000000     | 	.quad 56
0x350: c7ffffffffffffff     | 	.quad -57
0x358: c6ffffffffffffff     | 	.quad -58
0x360: c5ffffffffffffff     | 	.quad -59
0x368: 3c00000000000000     | 	.quad 60
0x370: 3d00000000000000     | 	.quad 61
0x378: 3e00000000000000     | 	.quad 62
0x380: 3f00000000000000     | 	.quad 63
0x388: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x390:                      | 	.align 16
0x390:                      | Predest:
0x390: fadebc0000000000     | 	.quad 0xbcdefa
0x398:                      | dest:
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590:                      | Postdest:
0x590: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x598:                      | .align 8
                            | # Run time stack
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
                            | 
0x618:                      | Stack:
